# -*- coding: utf-8 -*-
"""21BAI1696 Lab 1a.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1J87sagAjXWMs7oAkIOMW0t2OVQfhwmmi
"""

import cv2
import numpy as np
import matplotlib.pyplot as plt
from google.colab.patches import cv2_imshow

#TASK 1
image = cv2.imread('image.jpg')
image_rgb = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)

means, std_devs = cv2.meanStdDev(image)
print(f'Mean per channel: {means.ravel()}')
print(f'Standard deviation per channel: {std_devs.ravel()}')

colors = ('b', 'g', 'r')
for i, color in enumerate(colors):
    histogram = cv2.calcHist([image], [i], None, [256], [0, 256])
    plt.plot(histogram, color=color)
    plt.xlim([0, 256])

plt.title('Histogram for Blue, Green, and Red channels')
plt.show()

image_hsv = cv2.cvtColor(image, cv2.COLOR_BGR2HSV)
image_lab = cv2.cvtColor(image, cv2.COLOR_BGR2Lab)

fig, ax = plt.subplots(1, 3, figsize=(15, 5))
ax[0].imshow(image_rgb)
ax[0].set_title('Original Image')
ax[0].axis('off')

ax[1].imshow(cv2.cvtColor(image_hsv, cv2.COLOR_HSV2RGB))
ax[1].set_title('HSV Image')
ax[1].axis('off')

ax[2].imshow(cv2.cvtColor(image_lab, cv2.COLOR_Lab2RGB))
ax[2].set_title('Lab Image')
ax[2].axis('off')

plt.show()

#TASK 2
gray_image = cv2.imread('image.jpg', cv2.IMREAD_GRAYSCALE)

_, thresh_image = cv2.threshold(gray_image, 127, 255, cv2.THRESH_BINARY)

fig, ax = plt.subplots(1, 2, figsize=(10, 5))
ax[0].imshow(gray_image, cmap='gray')
ax[0].set_title('Original Grayscale Image')
ax[0].axis('off')

ax[1].imshow(thresh_image, cmap='gray')
ax[1].set_title('Thresholded Image')
ax[1].axis('off')

plt.show()

#TASK 3
hsv_image = cv2.cvtColor(image, cv2.COLOR_BGR2HSV)

lower_red = np.array([0, 100, 100])
upper_red = np.array([10, 255, 255])

mask = cv2.inRange(hsv_image, lower_red, upper_red)
segmented_image = cv2.bitwise_and(image, image, mask=mask)

fig, ax = plt.subplots(1, 2, figsize=(10, 5))
ax[0].imshow(cv2.cvtColor(image, cv2.COLOR_BGR2RGB))
ax[0].set_title('Original Image')
ax[0].axis('off')

ax[1].imshow(cv2.cvtColor(segmented_image, cv2.COLOR_BGR2RGB))
ax[1].set_title('Segmented Image')
ax[1].axis('off')

plt.show()