# -*- coding: utf-8 -*-
"""21BAI1696 Lab 1c.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ycfIFX98EUd__euOn3m9-C9qmEC6mAaS
"""

import cv2
import numpy as np
import matplotlib.pyplot as plt

#TASK 1
image = cv2.imread('image.jpg', cv2.IMREAD_GRAYSCALE)

plt.imshow(image, cmap='gray')
plt.title('Original Image')
plt.axis('off')
plt.show()

hist, bins = np.histogram(image.flatten(), 256, [0, 256])

plt.plot(hist, color='black')
plt.title('Histogram of Original Image')
plt.xlabel('Pixel Intensity')
plt.ylabel('Frequency')
plt.show()

cdf = hist.cumsum()

cdf_normalized = cdf * hist.max() / cdf.max()

plt.plot(cdf_normalized, color='black')
plt.title('CDF of Original Image')
plt.show()

equalized_image = cv2.equalizeHist(image)

fig, ax = plt.subplots(1, 2, figsize=(12, 6))
ax[0].imshow(image, cmap='gray')
ax[0].set_title('Original Image')
ax[0].axis('off')

ax[1].imshow(equalized_image, cmap='gray')
ax[1].set_title('Equalized Image')
ax[1].axis('off')

plt.show()

hist_eq, _ = np.histogram(equalized_image.flatten(), 256, [0, 256])
plt.plot(hist_eq, color='black')
plt.title('Histogram of Equalized Image')
plt.show()

#TASK 2
clahe = cv2.createCLAHE(clipLimit=2.0, tileGridSize=(8, 8))
ahe_image = clahe.apply(image)

plt.imshow(ahe_image, cmap='gray')
plt.title('Adaptive Histogram Equalized Image (AHE)')
plt.axis('off')
plt.show()

clahe_limited = cv2.createCLAHE(clipLimit=3.0, tileGridSize=(8, 8))
clahe_image = clahe_limited.apply(image)

plt.imshow(clahe_image, cmap='gray')
plt.title('Contrast Limited AHE (CLAHE)')
plt.axis('off')
plt.show()

fig, ax = plt.subplots(1, 4, figsize=(18, 5))
ax[0].imshow(image, cmap='gray')
ax[0].set_title('Original Image')
ax[0].axis('off')

ax[1].imshow(equalized_image, cmap='gray')
ax[1].set_title('Histogram Equalized')
ax[1].axis('off')

ax[2].imshow(ahe_image, cmap='gray')
ax[2].set_title('AHE')
ax[2].axis('off')

ax[3].imshow(clahe_image, cmap='gray')
ax[3].set_title('CLAHE')
ax[3].axis('off')

plt.show()

#TASK 3
image_color = cv2.imread('image.jpg')

image_color_rgb = cv2.cvtColor(image_color, cv2.COLOR_BGR2RGB)

R, G, B = cv2.split(image_color_rgb)

R_eq = cv2.equalizeHist(R)
G_eq = cv2.equalizeHist(G)
B_eq = cv2.equalizeHist(B)

image_eq = cv2.merge([R_eq, G_eq, B_eq])

fig, ax = plt.subplots(1, 2, figsize=(12, 6))
ax[0].imshow(image_color_rgb)
ax[0].set_title('Original Color Image')
ax[0].axis('off')

ax[1].imshow(image_eq)
ax[1].set_title('Equalized Color Image')
ax[1].axis('off')

plt.show()

#TASK 4
#MEDICINAL IMAGE
medical_image = cv2.imread('xray.jpg', cv2.IMREAD_GRAYSCALE)

medical_eq = cv2.equalizeHist(medical_image)

fig, ax = plt.subplots(1, 2, figsize=(12, 6))
ax[0].imshow(medical_image, cmap='gray')
ax[0].set_title('Original X-ray')
ax[0].axis('off')

ax[1].imshow(medical_eq, cmap='gray')
ax[1].set_title('Equalized X-ray')
ax[1].axis('off')

plt.show()

#Satellite imagery
satellite_image = cv2.imread('satellite.jpg', cv2.IMREAD_GRAYSCALE)

satellite_eq = cv2.equalizeHist(satellite_image)

fig, ax = plt.subplots(1, 2, figsize=(12, 6))
ax[0].imshow(satellite_image, cmap='gray')
ax[0].set_title('Original Satellite Image')
ax[0].axis('off')

ax[1].imshow(satellite_eq, cmap='gray')
ax[1].set_title('Equalized Satellite Image')
ax[1].axis('off')

plt.show()

#TASK 5
low_contrast_image = cv2.imread('low_contrast.jpg', cv2.IMREAD_GRAYSCALE)

low_contrast_eq = cv2.equalizeHist(low_contrast_image)

fig, ax = plt.subplots(1, 2, figsize=(12, 6))
ax[0].imshow(low_contrast_image, cmap='gray')
ax[0].set_title('Original Low Contrast Image')
ax[0].axis('off')

ax[1].imshow(low_contrast_eq, cmap='gray')
ax[1].set_title('Equalized Low Contrast Image')
ax[1].axis('off')

plt.show()

#TASK 6
image_rescaled_50 = cv2.resize(image, None, fx=0.5, fy=0.5)
image_rescaled_200 = cv2.resize(image, None, fx=2.0, fy=2.0)

image_eq_50 = cv2.equalizeHist(image_rescaled_50)
image_eq_200 = cv2.equalizeHist(image_rescaled_200)

fig, ax = plt.subplots(1, 3, figsize=(18, 6))
ax[0].imshow(image, cmap='gray')
ax[0].set_title('Original Image')
ax[0].axis('off')

ax[1].imshow(image_eq_50, cmap='gray')
ax[1].set_title('Equalized 50% Image')
ax[1].axis('off')

ax[2].imshow(image_eq_200, cmap='gray')
ax[2].set_title('Equalized 200% Image')
ax[2].axis('off')

plt.show()

#TASK 7
image_detail = cv2.imread('image.jpg', cv2.IMREAD_GRAYSCALE)

image_detail_eq = cv2.equalizeHist(image_detail)

fig, ax = plt.subplots(1, 2, figsize=(12, 6))
ax[0].imshow(image_detail, cmap='gray')
ax[0].set_title('Original Image')
ax[0].axis('off')

ax[1].imshow(image_detail_eq, cmap='gray')
ax[1].set_title('Equalized Image')
ax[1].axis('off')

plt.show()

#TASK 8
_, segmented = cv2.threshold(image, 128, 255, cv2.THRESH_BINARY)

equalized_segmented = cv2.equalizeHist(image)
_, segmented_eq = cv2.threshold(equalized_segmented, 128, 255, cv2.THRESH_BINARY)

fig, ax = plt.subplots(1, 2, figsize=(12, 6))
ax[0].imshow(segmented, cmap='gray')
ax[0].set_title('Segmented Original Image')
ax[0].axis('off')

ax[1].imshow(segmented_eq, cmap='gray')
ax[1].set_title('Segmented Equalized Image')
ax[1].axis('off')

plt.show()