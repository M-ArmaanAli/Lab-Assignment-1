# -*- coding: utf-8 -*-
"""21BAI1696 Lab 1b.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1p12waHn6i2-0X6zE6s5cPuWpKkiH8jkg
"""

import cv2
import numpy as np
import matplotlib.pyplot as plt

#TASK 1
image = cv2.imread('image.jpg', cv2.IMREAD_GRAYSCALE)

negative_image = 255 - image

fig, ax = plt.subplots(1, 2, figsize=(10, 5))
ax[0].imshow(image, cmap='gray')
ax[0].set_title('Original Image')
ax[0].axis('off')

ax[1].imshow(negative_image, cmap='gray')
ax[1].set_title('Negative Image')
ax[1].axis('off')

plt.show()

#TASK 2
def gamma_correction(image, gamma):
    gamma_corrected = np.array(255 * (image / 255) ** gamma, dtype='uint8')
    return gamma_corrected

gamma_05 = gamma_correction(image, 0.5)
gamma_1 = gamma_correction(image, 1.0)
gamma_2 = gamma_correction(image, 2.0)

fig, ax = plt.subplots(1, 4, figsize=(15, 5))
ax[0].imshow(image, cmap='gray')
ax[0].set_title('Original Image')
ax[0].axis('off')

ax[1].imshow(gamma_05, cmap='gray')
ax[1].set_title('Gamma 0.5')
ax[1].axis('off')

ax[2].imshow(gamma_1, cmap='gray')
ax[2].set_title('Gamma 1.0')
ax[2].axis('off')

ax[3].imshow(gamma_2, cmap='gray')
ax[3].set_title('Gamma 2.0')
ax[3].axis('off')

plt.show()

#TASK 3
c = 255 / np.log(1 + np.max(image))
log_image = c * np.log(1 + image)
log_image = np.array(log_image, dtype=np.uint8)

fig, ax = plt.subplots(1, 2, figsize=(10, 5))
ax[0].imshow(image, cmap='gray')
ax[0].set_title('Original Image')
ax[0].axis('off')

ax[1].imshow(log_image, cmap='gray')
ax[1].set_title('Log Transformed Image')
ax[1].axis('off')

plt.show()

# TASK 4
negative_image = 255 - image
gamma_2 = gamma_correction(image, 2.0)
log_image = c * np.log(1 + image)
log_image = np.array(log_image, dtype=np.uint8)

fig, ax = plt.subplots(1, 4, figsize=(15, 5))
ax[0].imshow(image, cmap='gray')
ax[0].set_title('Original Image')
ax[0].axis('off')

ax[1].imshow(negative_image, cmap='gray')
ax[1].set_title('Negative Image')
ax[1].axis('off')

ax[2].imshow(gamma_2, cmap='gray')
ax[2].set_title('Gamma 2.0')
ax[2].axis('off')

ax[3].imshow(log_image, cmap='gray')
ax[3].set_title('Log Transformed Image')
ax[3].axis('off')

plt.show()

#TASK 5
image_color = cv2.imread('image.jpg')

B, G, R = cv2.split(image_color)

negative_R = 255 - R
negative_G = 255 - G
negative_B = 255 - B

gamma_R = gamma_correction(R, 2.0)
gamma_G = gamma_correction(G, 2.0)
gamma_B = gamma_correction(B, 2.0)

log_R = np.array(c * np.log(1 + R), dtype=np.uint8)
log_G = np.array(c * np.log(1 + G), dtype=np.uint8)
log_B = np.array(c * np.log(1 + B), dtype=np.uint8)

negative_image_color = cv2.merge([negative_B, negative_G, negative_R])
gamma_image_color = cv2.merge([gamma_B, gamma_G, gamma_R])
log_image_color = cv2.merge([log_B, log_G, log_R])

fig, ax = plt.subplots(1, 4, figsize=(15, 5))
ax[0].imshow(cv2.cvtColor(image_color, cv2.COLOR_BGR2RGB))
ax[0].set_title('Original Image')
ax[0].axis('off')

ax[1].imshow(cv2.cvtColor(negative_image_color, cv2.COLOR_BGR2RGB))
ax[1].set_title('Negative Image')
ax[1].axis('off')

ax[2].imshow(cv2.cvtColor(gamma_image_color, cv2.COLOR_BGR2RGB))
ax[2].set_title('Gamma 2.0 Image')
ax[2].axis('off')

ax[3].imshow(cv2.cvtColor(log_image_color, cv2.COLOR_BGR2RGB))
ax[3].set_title('Log Transformed Image')
ax[3].axis('off')

plt.show()